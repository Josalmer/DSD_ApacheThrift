#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'calculadora_types'

module Calculadora
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def suma(num1, num2)
      send_suma(num1, num2)
      return recv_suma()
    end

    def send_suma(num1, num2)
      send_message('suma', Suma_args, :num1 => num1, :num2 => num2)
    end

    def recv_suma()
      result = receive_message(Suma_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma failed: unknown result')
    end

    def resta(num1, num2)
      send_resta(num1, num2)
      return recv_resta()
    end

    def send_resta(num1, num2)
      send_message('resta', Resta_args, :num1 => num1, :num2 => num2)
    end

    def recv_resta()
      result = receive_message(Resta_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta failed: unknown result')
    end

    def multiplica(num1, num2)
      send_multiplica(num1, num2)
      return recv_multiplica()
    end

    def send_multiplica(num1, num2)
      send_message('multiplica', Multiplica_args, :num1 => num1, :num2 => num2)
    end

    def recv_multiplica()
      result = receive_message(Multiplica_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplica failed: unknown result')
    end

    def divide(num1, num2)
      send_divide(num1, num2)
      return recv_divide()
    end

    def send_divide(num1, num2)
      send_message('divide', Divide_args, :num1 => num1, :num2 => num2)
    end

    def recv_divide()
      result = receive_message(Divide_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'divide failed: unknown result')
    end

    def distanciaManhattan(c1, c2)
      send_distanciaManhattan(c1, c2)
      return recv_distanciaManhattan()
    end

    def send_distanciaManhattan(c1, c2)
      send_message('distanciaManhattan', DistanciaManhattan_args, :c1 => c1, :c2 => c2)
    end

    def recv_distanciaManhattan()
      result = receive_message(DistanciaManhattan_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'distanciaManhattan failed: unknown result')
    end

    def distanciaEuclides(c1, c2)
      send_distanciaEuclides(c1, c2)
      return recv_distanciaEuclides()
    end

    def send_distanciaEuclides(c1, c2)
      send_message('distanciaEuclides', DistanciaEuclides_args, :c1 => c1, :c2 => c2)
    end

    def recv_distanciaEuclides()
      result = receive_message(DistanciaEuclides_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'distanciaEuclides failed: unknown result')
    end

    def sumaVectores(v1, v2)
      send_sumaVectores(v1, v2)
      return recv_sumaVectores()
    end

    def send_sumaVectores(v1, v2)
      send_message('sumaVectores', SumaVectores_args, :v1 => v1, :v2 => v2)
    end

    def recv_sumaVectores()
      result = receive_message(SumaVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sumaVectores failed: unknown result')
    end

    def restaVectores(v1, v2)
      send_restaVectores(v1, v2)
      return recv_restaVectores()
    end

    def send_restaVectores(v1, v2)
      send_message('restaVectores', RestaVectores_args, :v1 => v1, :v2 => v2)
    end

    def recv_restaVectores()
      result = receive_message(RestaVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'restaVectores failed: unknown result')
    end

    def multiplicaVectores(v1, v2)
      send_multiplicaVectores(v1, v2)
      return recv_multiplicaVectores()
    end

    def send_multiplicaVectores(v1, v2)
      send_message('multiplicaVectores', MultiplicaVectores_args, :v1 => v1, :v2 => v2)
    end

    def recv_multiplicaVectores()
      result = receive_message(MultiplicaVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplicaVectores failed: unknown result')
    end

    def divideVectores(v1, v2)
      send_divideVectores(v1, v2)
      return recv_divideVectores()
    end

    def send_divideVectores(v1, v2)
      send_message('divideVectores', DivideVectores_args, :v1 => v1, :v2 => v2)
    end

    def recv_divideVectores()
      result = receive_message(DivideVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'divideVectores failed: unknown result')
    end

    def reduce(v1)
      send_reduce(v1)
      return recv_reduce()
    end

    def send_reduce(v1)
      send_message('reduce', Reduce_args, :v1 => v1)
    end

    def recv_reduce()
      result = receive_message(Reduce_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'reduce failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_suma(seqid, iprot, oprot)
      args = read_args(iprot, Suma_args)
      result = Suma_result.new()
      result.success = @handler.suma(args.num1, args.num2)
      write_result(result, oprot, 'suma', seqid)
    end

    def process_resta(seqid, iprot, oprot)
      args = read_args(iprot, Resta_args)
      result = Resta_result.new()
      result.success = @handler.resta(args.num1, args.num2)
      write_result(result, oprot, 'resta', seqid)
    end

    def process_multiplica(seqid, iprot, oprot)
      args = read_args(iprot, Multiplica_args)
      result = Multiplica_result.new()
      result.success = @handler.multiplica(args.num1, args.num2)
      write_result(result, oprot, 'multiplica', seqid)
    end

    def process_divide(seqid, iprot, oprot)
      args = read_args(iprot, Divide_args)
      result = Divide_result.new()
      result.success = @handler.divide(args.num1, args.num2)
      write_result(result, oprot, 'divide', seqid)
    end

    def process_distanciaManhattan(seqid, iprot, oprot)
      args = read_args(iprot, DistanciaManhattan_args)
      result = DistanciaManhattan_result.new()
      result.success = @handler.distanciaManhattan(args.c1, args.c2)
      write_result(result, oprot, 'distanciaManhattan', seqid)
    end

    def process_distanciaEuclides(seqid, iprot, oprot)
      args = read_args(iprot, DistanciaEuclides_args)
      result = DistanciaEuclides_result.new()
      result.success = @handler.distanciaEuclides(args.c1, args.c2)
      write_result(result, oprot, 'distanciaEuclides', seqid)
    end

    def process_sumaVectores(seqid, iprot, oprot)
      args = read_args(iprot, SumaVectores_args)
      result = SumaVectores_result.new()
      result.success = @handler.sumaVectores(args.v1, args.v2)
      write_result(result, oprot, 'sumaVectores', seqid)
    end

    def process_restaVectores(seqid, iprot, oprot)
      args = read_args(iprot, RestaVectores_args)
      result = RestaVectores_result.new()
      result.success = @handler.restaVectores(args.v1, args.v2)
      write_result(result, oprot, 'restaVectores', seqid)
    end

    def process_multiplicaVectores(seqid, iprot, oprot)
      args = read_args(iprot, MultiplicaVectores_args)
      result = MultiplicaVectores_result.new()
      result.success = @handler.multiplicaVectores(args.v1, args.v2)
      write_result(result, oprot, 'multiplicaVectores', seqid)
    end

    def process_divideVectores(seqid, iprot, oprot)
      args = read_args(iprot, DivideVectores_args)
      result = DivideVectores_result.new()
      result.success = @handler.divideVectores(args.v1, args.v2)
      write_result(result, oprot, 'divideVectores', seqid)
    end

    def process_reduce(seqid, iprot, oprot)
      args = read_args(iprot, Reduce_args)
      result = Reduce_result.new()
      result.success = @handler.reduce(args.v1)
      write_result(result, oprot, 'reduce', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplica_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplica_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Divide_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::DOUBLE, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::DOUBLE, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Divide_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DistanciaManhattan_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    C1 = 1
    C2 = 2

    FIELDS = {
      C1 => {:type => ::Thrift::Types::STRUCT, :name => 'c1', :class => ::Coordenada},
      C2 => {:type => ::Thrift::Types::STRUCT, :name => 'c2', :class => ::Coordenada}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DistanciaManhattan_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DistanciaEuclides_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    C1 = 1
    C2 = 2

    FIELDS = {
      C1 => {:type => ::Thrift::Types::STRUCT, :name => 'c1', :class => ::Coordenada},
      C2 => {:type => ::Thrift::Types::STRUCT, :name => 'c2', :class => ::Coordenada}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DistanciaEuclides_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumaVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumaVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestaVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestaVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MultiplicaVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MultiplicaVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DivideVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DivideVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Reduce_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Reduce_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

